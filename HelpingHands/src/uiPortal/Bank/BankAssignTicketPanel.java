/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package uiPortal.Bank;

import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.causeBankTrack.BankAssignTicket;
import model.causeBankTrack.BankAssignTicketDirectory;
import model.causeBankTrack.BankEmployeeTicket;
import model.causeBankTrack.BankTicket;
import model.causeBankTrack.BankTicketDirectory;
import model.causes.Cause;
import model.causes.CauseDirectory;
import model.causeticket.CauseTicket;
import model.causeticket.CauseTicketDirectory;
import profile.bank.BankPerson;
import profile.bank.BankPersonDirectory;
import utilities.Constants;

/**
 *
 * @author HP
 */
public class BankAssignTicketPanel extends javax.swing.JPanel {

    /**
     * Creates new form BankAssignTicket
     */
    BankTicket bankTicket;
    BankTicketDirectory bankTicketDirectory; 
    BankAssignTicketDirectory bankAssignTicketDirectory;
    BankAssignTicket bankAssignTicket;
    ArrayList<BankAssignTicket> allBankAssignTicket;
    ArrayList<BankEmployeeTicket> bankEmpTktList;
    BankPerson bankPerson;
    ArrayList<BankPerson> activeBankPersonList;
    BankPersonDirectory bankPersonDirectory; 
    
    
    String loggedInUserCountry = null;
    public BankAssignTicketPanel() throws SQLException {
        initComponents();
        
        this.bankPersonDirectory = new BankPersonDirectory(bankPerson);
        this.bankAssignTicketDirectory = new BankAssignTicketDirectory(bankAssignTicket);
        allBankAssignTicket = new ArrayList<BankAssignTicket>();
        populateBankAssignTable();
        bankEmpTktList = new ArrayList<BankEmployeeTicket>();
        fetchBankEmpTicketData();
        activeBankPersonList = new ArrayList<BankPerson>();
        populateBankEmpTable();
    }
    public BankAssignTicketPanel(BankPerson bankPerson) throws SQLException{
        initComponents();
        
        this.bankPersonDirectory = new BankPersonDirectory(bankPerson);
        this.bankAssignTicketDirectory = new BankAssignTicketDirectory(bankAssignTicket);
        this.loggedInUserCountry=bankPerson.getCountry();
        allBankAssignTicket = new ArrayList<BankAssignTicket>();
        this.loggedInUserCountry = bankPerson.getCountry();
        bankEmpTktList = new ArrayList<BankEmployeeTicket>();
        fetchBankEmpTicketDataForEmp(bankPerson);
        activeBankPersonList = new ArrayList<BankPerson>();
        populateBankEmpTableforCountry();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    private void fetchBankEmpTicketDataForEmp(BankPerson bp) {
        BankTicketDirectory bnkDirectory = new BankTicketDirectory(null);
        ArrayList<BankTicket> allBankTicketsforemp = new ArrayList<BankTicket>();
        try {
            allBankTicketsforemp = bnkDirectory.fetchBankTicket();
            if(allBankTicketsforemp != null && !allBankTicketsforemp.isEmpty()) {
               bankEmpTktList = new ArrayList<BankEmployeeTicket>(); 
               for(BankTicket bnkTkt : allBankTicketsforemp) {
                   BankEmployeeTicket bnkEmpTkt = new BankEmployeeTicket(bnkTkt);
                   CauseTicket causeTicket = fetchCauseTicketData(bnkTkt.getCauseTkId());
                   if (causeTicket != null) {
                       String bpCountry = bp.getCountry();
                       if ( bpCountry !=null && !bpCountry.trim().equals("")) {
                           if (bpCountry.equals("USA") || bpCountry.equals("Canada")) {
                               if( causeTicket.getDonorCountry() != null && !causeTicket.getDonorCountry().equals("")) {
                                   if (bpCountry.equals(causeTicket.getDonorCountry())) {
                                        bnkEmpTkt.setCauseTicket(causeTicket);
                       Cause cause = fetchCauseData(causeTicket.getCauseId());
                       if (cause != null) {
                           bnkEmpTkt.setCause(cause);
                       }
                                   }
                               }
                           } else if (bpCountry.equals("India") || bpCountry.equals("Uganda") || bpCountry.equals("Kenya")) {
                                if (causeTicket.getReceivingCountry() != null && !causeTicket.getReceivingCountry().equals("")) {
                                      if (bpCountry.trim().equals(causeTicket.getReceivingCountry().trim())) {
                                        bnkEmpTkt.setCauseTicket(causeTicket);
                       Cause cause = fetchCauseData(causeTicket.getCauseId());
                       if (cause != null) {
                           bnkEmpTkt.setCause(cause);
                       }
                                }
                           }
                       }
                      
                   }
                   bankEmpTktList.add(bnkEmpTkt);
               }
               
               populateBankAssignTable();
            }
            }
        } catch(Exception e){
            System.out.println(e);
        }
    }
    
    public void populateBankAssignTable(){
        
        DefaultTableModel model = (DefaultTableModel)tblAssignTicket.getModel();
        model.setRowCount(0);
        if (bankEmpTktList != null && !bankEmpTktList.isEmpty()) {
          for(BankEmployeeTicket bnkEmpTkt: bankEmpTktList){
            Object[] row = new Object[2];
            row[0] = bnkEmpTkt;
            row[1] = bnkEmpTkt.getCauseTicket().getCreatedDate();
            model.addRow(row);
        } 
        }

    }
    
    public void populateBankEmpTable() throws SQLException{
        try{
            DefaultTableModel model = (DefaultTableModel)tblEmployee.getModel();
            model.setRowCount(0);
            //activeBankPersonList = bankPersonDirectory.populateActiveBp();
        
            /*****************************/
            ArrayList<BankPerson> localArrList= new ArrayList<BankPerson>();
            localArrList = bankPersonDirectory.populateActiveBp();
            activeBankPersonList = new ArrayList<BankPerson>();
                for(BankPerson bankPerson: localArrList){
                    if(bankPerson.getEmpType().equals("EMPLOYEE")){
                        activeBankPersonList.add(bankPerson);
                    }
                }
            
            /*****************************/
            
        for(BankPerson bankPerson: activeBankPersonList){
            Object[] row = new Object[6];
            //row[0] = bankPerson;
            if(bankPerson.getEmpType().equals("EMPLOYEE")){
                row[0] = bankPerson.getFirstName();
                row[1] = bankPerson.getLastName();
                row[2] = bankPerson.getEmail();
            }
            
            model.addRow(row);
            System.out.print("BANK PERSON"+bankPerson.getFirstName());
        }
        }catch(Exception e){
            
        }
        
    }
    
    
        public void populateBankEmpTableforCountry() throws SQLException{
        try{
            DefaultTableModel model = (DefaultTableModel)tblEmployee.getModel();
            model.setRowCount(0);
            //activeBankPersonList = bankPersonDirectory.populateActiveBp();
        
            /*****************************/
            ArrayList<BankPerson> localArrList= new ArrayList<BankPerson>();
            if (loggedInUserCountry != null && !loggedInUserCountry.trim().equals("")) {
                        localArrList = bankPersonDirectory.populateCountryActiveBp(loggedInUserCountry);
            activeBankPersonList = new ArrayList<BankPerson>();
                for(BankPerson bankPerson: localArrList){
                    if(bankPerson.getEmpType().equals("EMPLOYEE")){
                        activeBankPersonList.add(bankPerson);
                    }
                }
            
            /*****************************/
            
        for(BankPerson bankPerson: activeBankPersonList){
            Object[] row = new Object[6];
            //row[0] = bankPerson;
            if(bankPerson.getEmpType().equals("EMPLOYEE")){
                row[0] = bankPerson.getFirstName();
                row[1] = bankPerson.getLastName();
                row[2] = bankPerson.getEmail();
            }
            
            model.addRow(row);
            System.out.print("BANK PERSON"+bankPerson.getFirstName());
        }
            }
    
        }catch(Exception e){
            
        }
        
    }
    
    /*public BankPerson updateBanktktTable(int rownum){
        
        return  
    }*/
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblAssignTicket = new javax.swing.JTable();
        btnSelect = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtCauseName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtCreateDate = new javax.swing.JTextField();
        btnAssign = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblEmployee = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        txtBankTktnum = new javax.swing.JTextField();

        setBackground(new java.awt.Color(255, 255, 255));

        tblAssignTicket.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Cause Name", "Create Date"
            }
        ));
        jScrollPane1.setViewportView(tblAssignTicket);

        btnSelect.setText("Select Ticket");
        btnSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectActionPerformed(evt);
            }
        });

        jButton2.setText("View Assigned");

        jButton3.setText("View Unassigned");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Assign Tickets to Bank Employees");

        jLabel2.setText("Cause Name");

        jLabel4.setText("Create Date");

        txtCreateDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCreateDateActionPerformed(evt);
            }
        });

        btnAssign.setText("Assign");
        btnAssign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignActionPerformed(evt);
            }
        });

        tblEmployee.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "First Name", "Last name", "Email Id"
            }
        ));
        jScrollPane2.setViewportView(tblEmployee);

        jLabel3.setText("Bank Ticket number");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1091, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(700, Short.MAX_VALUE)
                .addComponent(btnSelect)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addGap(56, 56, 56))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(107, 107, 107)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnAssign)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(355, 355, 355)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtBankTktnum))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCauseName, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(74, 74, 74)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCreateDate, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(10, 10, 10)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSelect)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtBankTktnum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCauseName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCreateDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAssign)
                .addContainerGap(132, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtCreateDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCreateDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCreateDateActionPerformed

    private void btnAssignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblEmployee.getSelectedRow();
        BankPerson bankPerson;
        int bank_tk_num = Integer.parseInt(txtBankTktnum.getText());
        bankPerson = activeBankPersonList.get(selectedRow);
        bankTicketDirectory = new BankTicketDirectory(bankTicket);
        bankTicketDirectory.updateBankEmptktTable(bankPerson, bank_tk_num);
        JOptionPane.showMessageDialog(this, "Ticket assigned toemployee");
    }//GEN-LAST:event_btnAssignActionPerformed

    private void btnSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectActionPerformed
        // TODO add your handling code here:
        //bankEmpTktList
        /*
        BankPerson bp= bankPersonList.get(selectedRow);
        //System.out.println(bp.getBankPersonId());
        txtFirstName.setText(bp.getFirstName());
        txtLastName.setText(bp.getLastName());
        txtEmailId.setText(bp.getEmail());
        */
        int selectedRow = tblAssignTicket.getSelectedRow();
        if(selectedRow < 0){
            JOptionPane.showMessageDialog(this, "Please Select a row");
        }else{
            BankEmployeeTicket bankEmployeeTicket = bankEmpTktList.get(selectedRow);
            txtCauseName.setText(bankEmployeeTicket.getCause().toString());
            txtCreateDate.setText(bankEmployeeTicket.getCauseTicket().getCreatedDate().toString());
            int banktk_num=bankEmployeeTicket.getBankTicket().getBankTkId();
            txtBankTktnum.setText(String.valueOf(banktk_num));
        }
        
    }//GEN-LAST:event_btnSelectActionPerformed
    private void fetchBankEmpTicketData(){
        BankTicketDirectory bnkDirectory = new BankTicketDirectory(null);
        ArrayList<BankTicket> allBankTickets = new ArrayList<BankTicket>();
        try {
            allBankTickets = bnkDirectory.fetchBankTicket();
            if(allBankTickets != null && !allBankTickets.isEmpty()) {
               bankEmpTktList = new ArrayList<BankEmployeeTicket>(); 
               for(BankTicket bnkTkt : allBankTickets) {
                   BankEmployeeTicket bnkEmpTkt = new BankEmployeeTicket(bnkTkt);
                   CauseTicket causeTicket = fetchCauseTicketData(bnkTkt.getCauseTkId());
                   if (causeTicket != null) {
                       bnkEmpTkt.setCauseTicket(causeTicket);
                       Cause cause = fetchCauseData(causeTicket.getCauseId());
                       if (cause != null) {
                           bnkEmpTkt.setCause(cause);
                       }
                   }
                   bankEmpTktList.add(bnkEmpTkt);
               }
               
               populateBankAssignTable();
            }
        } catch(Exception e){
            System.out.println(e);
        }
        
    }
    
        private Cause fetchCauseData(int causeId) {
        Cause cause = null;
        try {
           CauseDirectory causeDirectory =  new CauseDirectory(null); 
           cause = causeDirectory.fetchCauseById(causeId);
        } catch (Exception e) {
            System.out.println(e);
        }
        return cause;
    }
    
        private CauseTicket fetchCauseTicketData(int causeTicketId) {
        CauseTicket causeTicket= null;
        try {
            CauseTicketDirectory causeTicketDirectory = new CauseTicketDirectory(null);
            causeTicket = causeTicketDirectory.fetchCauseTicketData(causeTicketId);
        } catch (Exception e) {
            System.out.println(e);
        }
        return causeTicket;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAssign;
    private javax.swing.JButton btnSelect;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblAssignTicket;
    private javax.swing.JTable tblEmployee;
    private javax.swing.JTextField txtBankTktnum;
    private javax.swing.JTextField txtCauseName;
    private javax.swing.JTextField txtCreateDate;
    // End of variables declaration//GEN-END:variables
}
